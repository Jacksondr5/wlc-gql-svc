# Node.js Express Web App to Linux on Azure
# Build a Node.js Express app and deploy it to Azure as a Linux web app.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
  - master
  - develop
  - features/*

variables:
  # Azure Resource Manager connection created during pipeline creation
  azureSubscription: "360e4d72-a8ff-4388-bbb2-2a42a99ea263"

  # Web app name
  webAppName: ""

  # Agent VM image name
  vmImageName: "ubuntu-latest"

stages:
  - stage: Build
    displayName: Build stage
    jobs:
      - job: Build
        displayName: Build
        pool:
          vmImage: $(vmImageName)

        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: "10.x"
              checkLatest: true
            displayName: "Install Node.js"

          - script: npm ci
            displayName: "Install dependencies"
          - task: SonarCloudPrepare@1
            inputs:
              SonarCloud: "SonarCloud"
              organization: "jacksondr5"
              scannerMode: "CLI"
              configMode: "file"
              configFile: ".sonarcloud.properties"

          - script: npm run build
            displayName: "Build"

          - script: npm run test
            displayName: "Test"

          - task: SonarCloudAnalyze@1

          - task: SonarCloudPublish@1
            inputs:
              pollingTimeoutSec: "300"

          - script: npm run push-schema
            displayName: "Publish schema to Apollo"
          # - task: ArchiveFiles@2
          #   displayName: "Archive files"
          #   inputs:
          #     rootFolderOrFile: "$(System.DefaultWorkingDirectory)"
          #     includeRootFolder: false
          #     archiveType: zip
          #     archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
          #     replaceExistingArchive: true
          # - upload: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
          #   artifact: drop
  # - stage: Deploy
  #   displayName: Deploy stage
  #   dependsOn: Build
  #   condition: succeeded()
  #   jobs:
  #     - deployment: Deploy
  #       displayName: Deploy
  #       environment: "development"
  #       pool:
  #         vmImage: $(vmImageName)
  #       strategy:
  #         runOnce:
  #           deploy:
  #             steps:
  #               - task: AzureWebApp@1
  #                 displayName: "Azure Web App Deploy: "
  #                 inputs:
  #                   azureSubscription: $(azureSubscription)
  #                   appType: webAppLinux
  #                   appName: $(webAppName)
  #                   runtimeStack: "NODE|10.10"
  #                   package: $(Pipeline.Workspace)/drop/$(Build.BuildId).zip
  #                   startUpCommand: "npm run start"
